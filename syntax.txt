OVERVIEW OF CSASM
=================

CSASM is a stack-based language written in an assembly-like syntax that is executed like a C# program.


All CSASM files should have the extension ".csa".

For any given CSASM project, a function named "main" must be defined.  This is where the code will start running from in the CSASM sandbox.

The stack is internally represented as a Stack<dynamic>, meaning any values can be pushed to it.
Care should be used when popping entries from the stack since attempting to pop an entry from the stack with an invalid type will cause a runtime error.

For the sake of consistency with assembly in general, all defined functions are static.
Functions can be marked as "private" or "public".  Private functions are only visible from within a given file, whereas public functions are visible everywhere.


DEFINED TOKENS
==============

.asm_name ............... The name of the assembly.  Defaults to "csasm_prog" if not defined.

.global ................. Marks a token as a global variable

.hide ................... Marks a function as "private".  Methods default to "public" if this token isn't used

.lbl <name> ............. Defines a jump/branch label whose name is <name>.  Labels must be contained in methods and are bound to the scope of the method
.local .................. Marks atoken as a local variable

.pub .................... Marks a function as "public".

.stack .................. The capacity of the stack this assembly will use.  Defaults to 1000 entries.

end ..................... Ends a method declaration

func <name>: ............ Begins a method declaration whose name is <name>


DEFINED TYPES
=============

~arr:<type>,<length> .... A new <type> array instance with <length> elements

char .................... Character literal type

f32 ..................... 32-bit floating-point type
f64 ..................... 64-bit floating-point type

i16 ..................... Signed 16-bit integer type
i32 ..................... Signed 32-bit integer type
i64 ..................... Signed 64-bit integer type
i8 ...................... Signed 8-bit integer type

obj ..................... Object type

str ..................... String type

u16 ..................... Unsigned 16-bit integer type
u32 ..................... Unsigned 32-bit integer type
u64 ..................... Unsigned 64-bit integer type
u8 ...................... Unsigned 8-bit integer type


DEFINED INSTRUCTIONS
====================

abs ..................... Pops a value from the stack and pushes its absolute value
add ..................... Pops two values from the stack and pushes the result of their addition
asl ..................... Shifts a 32-bit integer stored in the accumulator one bit to the left
asr ..................... Shifts a 32-bit integer stored in the accumulator one bit to the right

br <label> .............. Unconditionally jumps execution to <label>
brfalse <label> ......... Jumps execution to <label> iff the accumulator contains a null, zero or an empty string
brtrue <label> .......... Jumps execution to <label> iff the accumulator contains a non-zero value or a non-empty string

call <func> ............. Calls a function.  The function's arguments must be pushed to the stack before this instruction
clf.c ................... Clears the Carry flag
clf.o ................... Clears the Comparison flag
comp .................... Sets the Comparison flag iff the top two elements on the stack are equal
comp.gt ................. Pops two values from the stack.  If the second-to-top element on the stack is greater than than the top element, the Comparison flag is set
comp.lt ................. Pops two values from the stack.  If the second-to-top element on the stack is less than than the top element, the Comparison flag is set
conv <type> ............. Pops a value from the stack, converts it to <type>, then pushes the result
conv.a <type> ........... Converts the value in the accumulator to the given type

dec <var> ............... Decrements an integer stored in <var> by one
div ..................... Pops two values from the stack and pushes the result of their quotient
dup ..................... Duplicates the value at the top of the stack

exit .................... Stops the program

inc <var> ............... Increments an integer stored in <var> by one
interp <str> ............ Pops an obj array from the stack and uses its values to modify <str>
is <type> ............... Sets the Comparison flag iff the value on the top of the stack has the same type as <type>
is.a <type> ............. Sets the Comparison flag iff the value contained in the accumulator has the same type as <type>

lda <var> ............... Stores <var> into the accumulator
ldelem <index> .......... Pops an array instance from the stack then pushes the value contained in that array at the zero-based index <index>

mul ..................... Pops two values from the stack and pushes the result of their product

neg ..................... Pops a value from the stack, then pushes its negation
newarr <type> ........... Pops a 32-bit integer from the stack then pushes a new <type> array instance using those values
not ..................... Pops an integer value from the stack, then pushes the bitwise-NOT of it

pop <var> ............... Pops a value from the stack and stores it in <var>
popd .................... Pops a value from the stack and discards it
print ................... Pops a value from the stack, then prints its string representation to the console
print.n ................. Pops a value from the stack, then prints its string representation to the console with a newline appended
push <arg> .............. Pushes <arg> to the stack

ret ..................... Returns from a method
rol ..................... Shifts a 32-bit integer stored in the accumulator 1 bit to the left and updates the Carry flag
ror ..................... Shifts a 32-bit integer stored in the accumulator 1 bit to the right and updates the Carry flag

sta <var> ............... Stores the value in the accumulator in <var>
stelem <index> .......... Pops the value to store and then the array instance.  Stores the value in the array instance at the given index
stf.c ................... Sets the Carry flag
stf.o ................... Sets the Comparison flag
sub ..................... Pops two values from the stack and pushes the result of their difference

throw <str> ............. Throws a "ThrowException" with whose message is <str>
type .................... Pops a value from the stack, then pushes its type's string representation


DEFINED REGISTERS
=================

$a ...................... The accumulator

$1 ...................... A register.  Can be used to store any value independently of the stack
$2 ......................   ---
$3 ......................   ---
$4 ......................   ---
$5 ......................   ---

$f.c .................... The Carry flag
$f.o .................... The Comparison flag