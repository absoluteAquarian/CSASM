#ifndef HEADER_STDARR
#define HEADER_STDARR

; Array Element Copy
; Arguments:  array1, array2, index
; Purpose:  Copies array1[index] to array2[index]
func arrcopy:
	.local __arrcopy_array1 : obj
	.local __arrcopy_array2 : obj
	.local __arrcopy_index : i32

	clf.o
	pop __arrcopy_index
	pop __arrcopy_array2
	pop __arrcopy_array1

	; Verify that both the arrays are actually arrays
	push __arrcopy_array1
	isarr obj
	push $f.o
	brtrue checkArr2
	throw "Source object was not an array instance"
	
.lbl checkArr2
	clf.o
	push __arrcopy_array2
	isarr obj
	push $f.o
	brtrue compute
	throw "Destination object was not an array instance"

.lbl compute
	push __arrcopy_array2
	push __arrcopy_array1
	ldelem __arrcopy_index
	stelem __arrcopy_index

	clf.o
	ret
end

; Array Sum
; Arguments:  array
; Purpose:  Sums the values in an array
func arrsum:
	.local __arrsum_array : obj
	.local __arrsum_sum : obj
	pop __arrsum_array

	clf.o
	push __arrsum_array
	isarr obj
	push $f.o
	brtrue checkArrType
	throw "Argument was not an array instance"

.lbl checkArrType
	clf.o
	push __arrsum_array
	isarr str
	push __arrsum_array
	isarr char
	push $f.o
	brfalse calcSum
	throw "Argument cannot be an <~arr:str> or <~arr:char>"

.lbl calcSum
	clf.o
	push __arrsum_array
	len
	push 1
	comp
	push $f.o
	brfalse initLoop
	push __arrsum_array
	ldelem 0
	ret

.lbl initLoop
	push $1
	push 1
	pop $1

	push __arrsum_array
	ldelem 0
	pop __arrsum_sum

	.lbl loop
		clf.o
		push __arrsum_sum
		push __arrsum_array
		ldelem $1
		add
		pop __arrsum_sum

		inc $1
		push $1
		push __arrsum_array
		len
		comp.gte
		push $f.o
		brfalse loop

	pop $1
	push __arrsum_sum

	clf.o
	ret
end

; Array Reverse
; Arguments:  array
; Purpose:  Reverses an array on the top of the stack without modifying the array instance
func arrrev:
	.local __arrrev_array : obj
	.local __arrrev_copy : obj
	.local __arrrev_len : i32
	.local __arrrev_iter : i32

	; "dup" instruction is used to get a clone of the array instance
	; A clone is needed since creating a new array instance isn't currently possible
	dup
	dup
	pop __arrrev_array
	pop __arrrev_copy
	
	clf.o
	isarr obj
	brtrue doReverse
	throw "Value on stack was not an array instance"

.lbl doReverse
	clf.o

	push __arrrev_array
	len
	dup
	pop __arrrev_len

	push 1
	sub
	pop __arrrev_iter

	.lbl loop
		push __arrrev_array
		push __arrrev_copy
		ldelem __arrrev_iter
		stelem __arrrev_iter

		dec __arrrev_iter
		clf.o
		push __arrrev_iter
		push 0
		comp.lt
		push $f.o
		brfalse loop

	clf.o
	push __arrrev_array
	ret
end

#endif ; HEADER_STDARR