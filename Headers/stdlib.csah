#ifndef HEADER_STDLIB
#define HEADER_STDLIB

#define COLOR_BLACK        1
#define COLOR_DARKGREEN    2
#define COLOR_DARKCYAN     3
#define COLOR_DARKRED      4
#define COLOR_DARKMAGENTA  5
#define COLOR_DARKYELLOW   6
#define COLOR_GRAY         7
#define COLOR_DARKGRAY     8
#define COLOR_BLUE         9
#define COLOR_GREEN       10
#define COLOR_CYAN        11
#define COLOR_RED         12
#define COLOR_MAGENTA     13
#define COLOR_YELLOW      14
#define COLOR_WHITE       15

func mvcurs:
	; Arguments:  x, y
	; Purpose:  Moves the cursor to the (x, y) position in the console buffer
	.local __mvcurs_cursX : i32
	.local __mvcurs_cursY : i32

	clf.o
	pop __mvcurs_cursY
	pop __mvcurs_cursX

	; Cursor needs to be in the buffer area
	push __mvcurs_cursX
	push 0
	comp.lt
	push $f.o
	brtrue throwX
	clf.o
	push __mvcurs_cursX
	push $con.bw
	comp.gte
	push $f.o
	brfalse setX
.lbl throwX
	cls
	push 0
	pop $con.cx
	push 0
	pop $con.cy
	conrc
	throw "Cursor target X-position was not in the console buffer"

.lbl setX
	push __mvcurs_cursX
	pop $con.cx

	push __mvcurs_cursY
	push 0
	comp.lt
	push $f.o
	brtrue throwY
	clf.o
	push __mvcurs_cursY
	push $con.bh
	comp.gte
	push $f.o
	brfalse setY
.lbl throwY
	cls
	push 0
	pop $con.cx
	push 0
	pop $con.cy
	conrc
	throw "Cursor target Y-position was not in the console buffer"

.lbl setY
	push __mvcurs_cursY
	pop $con.cy

	clf.o

	ret
end

; Is an Integer?
; Arguments:  obj
; Purpose:  Pushes either True or False if the object on the stack has an integer type
func isInteger:
	.local __isInteger_obj : obj
	pop __isInteger_obj

	clf.o
	push $a
	lda __isInteger_obj

	is.a u8
	is.a u16
	is.a u32
	is.a u64

	is.a i8
	is.a i16
	is.a i32
	is.a i64
	pop $a

	push $f.o

	clf.o
	ret
end

#endif ; HEADER_STDLIB